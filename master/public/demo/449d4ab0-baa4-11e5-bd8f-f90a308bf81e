  /*{# Copyright (c) 2011-2012 Turbulenz Limited #}*/
  /*
  * @title: 2D Canvas
  * @description:
  * This sample demonstrates some of the capabilities of the Canvas 2D API.
  * It shows how to render lines, rectangles, circles, arcs, polygons, textures and linear and radial gradients using the Canvas 2D API.
  * It also shows a frames per second counter to get a measure of the API performance.
  */
  /*{# Import additional JS files here #}*/
  /*{{ javascript("scripts/htmlcontrols.js") }}*/
  /*{{ javascript("jslib/observer.js") }}*/
  /*{{ javascript("jslib/requesthandler.js") }}*/
  /*{{ javascript("jslib/utilities.js") }}*/
  /*{{ javascript("jslib/services/turbulenzservices.js") }}*/
  /*{{ javascript("jslib/services/turbulenzbridge.js") }}*/
  /*{{ javascript("jslib/services/gamesession.js") }}*/
  /*{{ javascript("jslib/services/mappingtable.js") }}*/
  /*{{ javascript("jslib/canvas.js") }}*/
  /*global TurbulenzEngine: true */
  /*global TurbulenzServices: false */
  /*global RequestHandler: false */
  /*global Canvas: false */
  TurbulenzEngine.onload = function onloadFn() {
      if (!TurbulenzEngine.canvas) {
          var graphicsDeviceParameters = {};
          var graphicsDevice = TurbulenzEngine.createGraphicsDevice(graphicsDeviceParameters);
      }
  
      var canvas, ctx, crateImage, stonesImage, stonesPattern;
  
      var requestHandlerParameters = {};
      var requestHandler = RequestHandler.create(requestHandlerParameters);
  
      // Create game session and load textures
      var mappingTableReceived = function mappingTableReceivedFn(mappingTable) {
          if (TurbulenzEngine.canvas) {
              var crateImageLoading = new Image();
              crateImageLoading.onload = function () {
                  crateImage = crateImageLoading;
              };
              crateImageLoading.src = mappingTable.getURL("textures/americanwarriorside.jpg");
  
              var stonesImageLoading = new Image();
              stonesImageLoading.onload = function () {
                  stonesImage = stonesImageLoading;
              };
              stonesImageLoading.src = mappingTable.getURL("textures/stones.jpg");
          } else {
              var crateImageParameters = {
                  src: mappingTable.getURL("textures/americanwarriorside.jpg"),
                  mipmaps: true,
                  onload: function (texture) {
                      crateImage = texture;
                  }
              };
              graphicsDevice.createTexture(crateImageParameters);
  
              var stonesImageParameters = {
                  src: mappingTable.getURL("textures/stones.jpg"),
                  mipmaps: true,
                  onload: function (texture) {
                      stonesImage = texture;
                  }
              };
              graphicsDevice.createTexture(stonesImageParameters);
          }
      };
  
      var gameSessionCreated = function gameSessionCreatedFn(gameSession) {
          TurbulenzServices.createMappingTable(requestHandler, gameSession, mappingTableReceived);
      };
      var gameSession = TurbulenzServices.createGameSession(requestHandler, gameSessionCreated);
  
      if (TurbulenzEngine.canvas) {
          canvas = TurbulenzEngine.canvas;
  
          var numFrames = 0;
          var lastSecond = 0;
      } else {
          canvas = Canvas.create(graphicsDevice);
      }
      var ctx = canvas.getContext('2d');
  
      // Set the initial previous frametime for the first loop
      var previousFrameTime = TurbulenzEngine.time;
      var fpsElement = document.getElementById("fpscounter");
      var currentFPS = "0", lastFPS = "0";
  
      /*
      var concavePoints = [];
      for (var a = 0; a < (Math.PI * 2); a += 0.05)
      {
      var r = (150 + (150 * Math.random()));
      concavePoints.push([(300 + (r * Math.cos(a))),
      (300 + (r * Math.sin(a)))]);
      }
      */
      var concavePoints = [[204, 49], [48, 233], [296, 328], [261, 244], [87, 228], [211, 206], [170, 178], [274, 132]];
  
     // Update: Should update the input, physics, sound and other js libraries used.
     //         The function should then trigger the rendering using the graphicsDevice
     function update() {
         // Gets the currentTime to be used in calculations for this frame
         var currentTime = TurbulenzEngine.time;
 
         // Delta is calculated to be used by update functions that require the elapsed time since they were last called
         var deltaTime = (currentTime - previousFrameTime);
         if (deltaTime > 0.1) {
             deltaTime = 0.1;
         }
 
         var deviceWidth, deviceHeight, i, j, points, numPoints, point;
 
         // Render the color
         var ok = false;
         if (TurbulenzEngine.canvas) {
             deviceWidth = canvas.width;
             deviceHeight = canvas.height;
             ok = true;
         } else {
             if (graphicsDevice.beginFrame()) {
                 deviceWidth = graphicsDevice.width;
                 deviceHeight = graphicsDevice.height;
 
                 if (canvas.width !== deviceWidth) {
                     canvas.width = deviceWidth;
                 }
                 if (canvas.height !== deviceHeight) {
                     canvas.height = deviceHeight;
                 }
 
                 ctx.beginFrame();
                 ok = true;
             }
         }
 
         if (ok) {
             ctx.fillStyle = '#000';
             ctx.fillRect(0, 0, deviceWidth, deviceHeight);
 
             if (stonesImage) {
                 ctx.save();
                 if (!stonesPattern) {
                     stonesPattern = ctx.createPattern(stonesImage, 'repeat');
                 }
                 ctx.globalAlpha = 0.5;
                 ctx.fillStyle = stonesPattern;
                 ctx.fillRect(0, 0, deviceWidth, deviceHeight);
                 ctx.restore();
             }
 
             //ctx.shadowOffsetX = 5;
             //ctx.shadowOffsetY = 5;
             //ctx.shadowColor = '#000';
             // colored rectangles
              
             if (crateImage) {
                 ctx.save();
                 ctx.translate(50, 0);
                 ctx.drawImage(crateImage, 40, 0, 256, 256);
                 ctx.restore();
             }         
 
                                   
 
             if (TurbulenzEngine.canvas) {
                 numFrames += 1;
 
                 if ((currentTime - lastSecond) >= 1) {
                     currentFPS = (numFrames / ((currentTime - lastSecond))).toFixed(2);
                     numFrames = 0;
                     lastSecond = currentTime;
                 }
             } else {
                 ctx.endFrame();
 
                 graphicsDevice.endFrame();
 
                 currentFPS = (graphicsDevice.fps).toFixed(2);
             }
         }
 
         if (lastFPS !== currentFPS) {
             lastFPS = currentFPS;
             if (fpsElement) {
                 fpsElement.innerHTML = currentFPS + ' fps';
             }
         }
 
         previousFrameTime = currentTime;
     }
 
     var intervalID = TurbulenzEngine.setInterval(update, 1000 / 60);
 
     TurbulenzEngine.onunload = function destroyScene() {
         // Clear the interval to stop update from being called
         TurbulenzEngine.clearInterval(intervalID);
 
         if (gameSession) {
             gameSession.destroy();
             gameSession = null;
         }
 
         // Clear any references to memory
         radgrad4 = null;
         radgrad3 = null;
         radgrad2 = null;
         radgrad = null;
         lingrad2 = null;
         lingrad = null;
         stonesPattern = null;
         stonesImage = null;
         crateImage = null;
         ctx = null;
         canvas = null;
         requestHandler = null;
 
         fpsElement = null;
 
         // Tell the Turbulenz Engine to force the js virtual machine
         // to free as much memory as possible
         TurbulenzEngine.flush();
 
         // Clear each native engine reference
         graphicsDevice = null;
 
         TurbulenzEngine.onunload = null;
     };
 };