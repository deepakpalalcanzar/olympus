
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
    <title>
        app2
    </title>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
    <style type="text/css">
html, body, div, span, object, iframe, h1, h2, p, a, img, ul, li, fieldset, form, label, legend, table, thead, tbody, tfoot, tr, th, td {
    border: 0;
    font-size: 100%;
    margin: 0;
    outline: 0;
    padding: 0;
    vertical-align: baseline;
}
    </style>
    <!-- block tz_app_header -->
    
    <!-- end tz_app_header -->
</head>
<body style="background:#B4B4B4;font:normal normal normal 13px/1.231 Helvetica,Arial,sans-serif;text-shadow:1px 1px #F9F8F8;">
    <div id="titlebar" style="position:fixed;height:65px;top:0;right:0;left:0;">
        <strong style="font-size:24px;line-height:64px;margin:16px;">
            <!-- block tz_app_title_name -->
            
            app2
            
            <!-- end tz_app_title_name -->
        </strong>
        <div id="titlelogo"
             style="float:right;width:27px;height:27px;margin:18px 24px;">
        </div>
    </div>
    <div id="sidebar"
         style="background:#B4B4B4;position:fixed;width:303px;top:65px;left:0;">
        <!-- block tz_app_html_controls -->
        
        
        <!-- end tz_app_html_controls -->
    </div>
    <div id="engine" style="background:#939393;position:fixed;top:65px;
                            bottom:0;right:0;left:303px;
                            border-left:1px solid #898989;">
        <!--
          HTML to create a plugin or canvas instance.
          Supplied by 'tz_engine_div' variable.
        -->
        
        <canvas id="turbulenz_game_engine_canvas" moz-opaque="true" tabindex="1">
            Sorry, but your browser does not support WebGL or does not have it
            enabled.  To get a WebGL-enabled browser, please see:<br/>
            <a href="http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" target="_blank">
                Getting a WebGL Implementation
            </a>
        </canvas>

        <script type="text/javascript">
            var canvasSupported = true;
            (function()
            {
                var contextNames = ["webgl", "experimental-webgl"];
                var context = null;
                var canvas = document.createElement('canvas');

                document.body.appendChild(canvas);

                for (var i = 0; i < contextNames.length; i += 1)
                {
                    try {
                        context = canvas.getContext(contextNames[i]);
                    } catch (e) {}

                    if (context) {
                        break;
                    }
                }
                if (!context)
                {
                    canvasSupported = false;
                    window.alert("Sorry, but your browser does not support WebGL or does not have it enabled.");
                }

                document.body.removeChild(canvas);
            }());
            var TurbulenzEngine = {};
        </script>
    </div>

    <!-- begin 'tz_include_js' variable -->
    <script type="text/javascript" src="jslib/debug.js"></script>
<script type="text/javascript" src="jslib/vmath.js"></script>
<script type="text/javascript" src="jslib/utilities.js"></script>
<script type="text/javascript" src="jslib/aabbtree.js"></script>
<script type="text/javascript" src="jslib/observer.js"></script>
<script type="text/javascript" src="jslib/webgl/ddsloader.js"></script>
<script type="text/javascript" src="jslib/webgl/graphicsdevice.js"></script>
<script type="text/javascript" src="jslib/webgl/inputdevice.js"></script>
<script type="text/javascript" src="jslib/webgl/mathdevice.js"></script>
<script type="text/javascript" src="jslib/webgl/networkdevice.js"></script>
<script type="text/javascript" src="jslib/webgl/physicsdevice.js"></script>
<script type="text/javascript" src="jslib/webgl/sounddevice.js"></script>
<script type="text/javascript" src="jslib/webgl/soundtarloader.js"></script>
<script type="text/javascript" src="jslib/webgl/tarloader.js"></script>
<script type="text/javascript" src="jslib/webgl/tgaloader.js"></script>
<script type="text/javascript" src="jslib/webgl/touch.js"></script>
<script type="text/javascript" src="jslib/webgl/touchevent.js"></script>
<script type="text/javascript" src="jslib/webgl/turbulenzengine.js"></script>
<script type="text/javascript" src="scripts/htmlcontrols.js"></script>
<script type="text/javascript" src="jslib/requesthandler.js"></script>
<script type="text/javascript" src="jslib/services/turbulenzservices.js"></script>
<script type="text/javascript" src="jslib/services/turbulenzbridge.js"></script>
<script type="text/javascript" src="jslib/services/gamesession.js"></script>
<script type="text/javascript" src="jslib/services/mappingtable.js"></script>
<script type="text/javascript" src="jslib/canvas.js"></script>
    <!-- end 'tz_include_js' variable -->

    <script type="text/javascript">
      // ----------------------------------------
      // Embedded code and startup code.
      // Supplied by 'tz_startup_code' variable.
      // ----------------------------------------
      
  
  /*
  * @title: 2D Canvas
  * @description:
  * This sample demonstrates some of the capabilities of the Canvas 2D API.
  * It shows how to render lines, rectangles, circles, arcs, polygons, textures and linear and radial gradients using the Canvas 2D API.
  * It also shows a frames per second counter to get a measure of the API performance.
  */
  
  
  
  
  
  
  
  
  
  
  /*global TurbulenzEngine: true */
  /*global TurbulenzServices: false */
  /*global RequestHandler: false */
  /*global Canvas: false */
  TurbulenzEngine.onload = function onloadFn() {
      if (!TurbulenzEngine.canvas) {
          var graphicsDeviceParameters = {};
          var graphicsDevice = TurbulenzEngine.createGraphicsDevice(graphicsDeviceParameters);
      }
  
      var canvas, ctx, crateImage, stonesImage, stonesPattern;
  
      var requestHandlerParameters = {};
      var requestHandler = RequestHandler.create(requestHandlerParameters);
  
      // Create game session and load textures
      var mappingTableReceived = function mappingTableReceivedFn(mappingTable) {
          if (TurbulenzEngine.canvas) {
              var crateImageLoading = new Image();
              crateImageLoading.onload = function () {
                  crateImage = crateImageLoading;
              };
              crateImageLoading.src = mappingTable.getURL("textures/americanwarriorside.jpg");
  
              var stonesImageLoading = new Image();
              stonesImageLoading.onload = function () {
                  stonesImage = stonesImageLoading;
              };
              stonesImageLoading.src = mappingTable.getURL("textures/stones.jpg");
          } else {
              var crateImageParameters = {
                  src: mappingTable.getURL("textures/americanwarriorside.jpg"),
                  mipmaps: true,
                  onload: function (texture) {
                      crateImage = texture;
                  }
              };
              graphicsDevice.createTexture(crateImageParameters);
  
              var stonesImageParameters = {
                  src: mappingTable.getURL("textures/stones.jpg"),
                  mipmaps: true,
                  onload: function (texture) {
                      stonesImage = texture;
                  }
              };
              graphicsDevice.createTexture(stonesImageParameters);
          }
      };
  
      var gameSessionCreated = function gameSessionCreatedFn(gameSession) {
          TurbulenzServices.createMappingTable(requestHandler, gameSession, mappingTableReceived);
      };
      var gameSession = TurbulenzServices.createGameSession(requestHandler, gameSessionCreated);
  
      if (TurbulenzEngine.canvas) {
          canvas = TurbulenzEngine.canvas;
  
          var numFrames = 0;
          var lastSecond = 0;
      } else {
          canvas = Canvas.create(graphicsDevice);
      }
      var ctx = canvas.getContext('2d');
  
      // Set the initial previous frametime for the first loop
      var previousFrameTime = TurbulenzEngine.time;
      var fpsElement = document.getElementById("fpscounter");
      var currentFPS = "0", lastFPS = "0";
  
      /*
      var concavePoints = [];
      for (var a = 0; a < (Math.PI * 2); a += 0.05)
      {
      var r = (150 + (150 * Math.random()));
      concavePoints.push([(300 + (r * Math.cos(a))),
      (300 + (r * Math.sin(a)))]);
      }
      */
      var concavePoints = [[204, 49], [48, 233], [296, 328], [261, 244], [87, 228], [211, 206], [170, 178], [274, 132]];
  
     // Update: Should update the input, physics, sound and other js libraries used.
     //         The function should then trigger the rendering using the graphicsDevice
     function update() {
         // Gets the currentTime to be used in calculations for this frame
         var currentTime = TurbulenzEngine.time;
 
         // Delta is calculated to be used by update functions that require the elapsed time since they were last called
         var deltaTime = (currentTime - previousFrameTime);
         if (deltaTime > 0.1) {
             deltaTime = 0.1;
         }
 
         var deviceWidth, deviceHeight, i, j, points, numPoints, point;
 
         // Render the color
         var ok = false;
         if (TurbulenzEngine.canvas) {
             deviceWidth = canvas.width;
             deviceHeight = canvas.height;
             ok = true;
         } else {
             if (graphicsDevice.beginFrame()) {
                 deviceWidth = graphicsDevice.width;
                 deviceHeight = graphicsDevice.height;
 
                 if (canvas.width !== deviceWidth) {
                     canvas.width = deviceWidth;
                 }
                 if (canvas.height !== deviceHeight) {
                     canvas.height = deviceHeight;
                 }
 
                 ctx.beginFrame();
                 ok = true;
             }
         }
 
         if (ok) {
             ctx.fillStyle = '#000';
             ctx.fillRect(0, 0, deviceWidth, deviceHeight);
 
             if (stonesImage) {
                 ctx.save();
                 if (!stonesPattern) {
                     stonesPattern = ctx.createPattern(stonesImage, 'repeat');
                 }
                 ctx.globalAlpha = 0.5;
                 ctx.fillStyle = stonesPattern;
                 ctx.fillRect(0, 0, deviceWidth, deviceHeight);
                 ctx.restore();
             }
 
             //ctx.shadowOffsetX = 5;
             //ctx.shadowOffsetY = 5;
             //ctx.shadowColor = '#000';
             // colored rectangles
              
             if (crateImage) {
                 ctx.save();
                 ctx.translate(50, 0);
                 ctx.drawImage(crateImage, 40, 0, 256, 256);
                 ctx.restore();
             }         
 
                                   
 
             if (TurbulenzEngine.canvas) {
                 numFrames += 1;
 
                 if ((currentTime - lastSecond) >= 1) {
                     currentFPS = (numFrames / ((currentTime - lastSecond))).toFixed(2);
                     numFrames = 0;
                     lastSecond = currentTime;
                 }
             } else {
                 ctx.endFrame();
 
                 graphicsDevice.endFrame();
 
                 currentFPS = (graphicsDevice.fps).toFixed(2);
             }
         }
 
         if (lastFPS !== currentFPS) {
             lastFPS = currentFPS;
             if (fpsElement) {
                 fpsElement.innerHTML = currentFPS + ' fps';
             }
         }
 
         previousFrameTime = currentTime;
     }
 
     var intervalID = TurbulenzEngine.setInterval(update, 1000 / 60);
 
     TurbulenzEngine.onunload = function destroyScene() {
         // Clear the interval to stop update from being called
         TurbulenzEngine.clearInterval(intervalID);
 
         if (gameSession) {
             gameSession.destroy();
             gameSession = null;
         }
 
         // Clear any references to memory
         radgrad4 = null;
         radgrad3 = null;
         radgrad2 = null;
         radgrad = null;
         lingrad2 = null;
         lingrad = null;
         stonesPattern = null;
         stonesImage = null;
         crateImage = null;
         ctx = null;
         canvas = null;
         requestHandler = null;
 
         fpsElement = null;
 
         // Tell the Turbulenz Engine to force the js virtual machine
         // to free as much memory as possible
         TurbulenzEngine.flush();
 
         // Clear each native engine reference
         graphicsDevice = null;
 
         TurbulenzEngine.onunload = null;
     };
 };

        // Engine startup
        window.onload = function ()
        {
            var appEntry = TurbulenzEngine.onload;
            var appShutdown = TurbulenzEngine.onunload;
            if (!appEntry) {
                window.alert("TurbulenzEngine.onload has not been set");
                return;
            }

            var canvas =
                document.getElementById('turbulenz_game_engine_canvas');

            var startCanvas = function startCanvasFn()
            {
                if (canvas.getContext && canvasSupported)
                {
                    TurbulenzEngine = WebGLTurbulenzEngine.create({
                        canvas: canvas,
                        fillParent: true
                    });

                    if (!TurbulenzEngine) {
                        window.alert("Failed to init TurbulenzEngine (canvas)");
                        return;
                    }

                    TurbulenzEngine.onload = appEntry;
                    TurbulenzEngine.onunload = appShutdown;
                    appEntry()
                }
            }

            var previousOnBeforeUnload = window.onbeforeunload;
            window.onbeforeunload = function ()
            {
                if (TurbulenzEngine.onunload) {
                    TurbulenzEngine.onunload.call(this);
                }
            };  // window.beforeunload

            startCanvas();
        };  // window.onload()

    </script>

</body>
</html>