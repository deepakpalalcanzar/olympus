Mast.registerComponent('VersionRow',{
	template: '.versionRow-template',
	afterCreate: function () {
		// Decorate links with <a> tags
		// var withProtocol = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
		// var withoutProtocol = /(\b[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
		var urlExpression = /(((https?|ftp|file):\/\/)?([A-Z,0-9,a-z]+\.)+[A-Z,0-9,a-z]+[?\/]?(.+)*)/ig;
		var linkTemplate = '<a target="_blank" href="$1">$1</a>';
		var message = this.get('message').replace(urlExpression,linkTemplate);

		this.$('.details-text').html(message);
		// Make sure protocol exists to make link external
		this.$('.details-text a').each(function(){
			var href = $(this).attr('href');
			if (href && !href.match(/(https?|ftp|file):\/\//)) {
				$(this).attr('href',"http://"+href);
			}
		});
	}
});

// inode activity list component
Mast.registerTree('VersionList', {

	_class         : 'VersionList',
	template       : '.inodeVersion-template',
	outlet         : '.check-version-outlet',
	emptyHTML      : '<span class="no-activity">There no version of this file.</span>',
	collection     : 'Versions',
	branchOutlet   : '.versionRow-outlet',
	branchComponent: 'VersionRow',

	subscriptions: {
		'~COMMENT_CREATE': function (comment) {
			if (comment && comment.source && comment.source.item &&
				comment.source.item.id == this.get('id') &&
				comment.source.item.type == this.get('type')) {
				this.collection.add(comment.source);
				this.scrollToBottom();
			}
		}
	},

	events: {

		'click .postVersion-button': 'postVersion',
		'pressEnter'               : 'postVersion',
		'resize'                   : 'resizeVersionSection',
		'click .span-delete'  	   : 'deleteFile',
		'click .span-comment'  	   : 'comment',

	},

	init: function() {
		var self = this;
		this.collection.listVersion(this.pattern.model.attributes,function(err, res){
			self.scrollAtBottom();
		});
		$(window).on('resize', this.resizeVersionSection);
	},

	deleteFile: function(event){
		Mast.Socket.request('/'+this.get('type')+'/delete',{
			id: event.target.id
		}, function(response){
			if (response===403) {
				alert('Permission denied. You do not have sufficient permissions to delete this item.');
			} else {
				$("#version_"+response.obj.id).parent().remove();
			}
		});
	},

	comment: function(event){

		$(".versionRow-template").children().not("#version_"+event.target.id).hide();
		$('.versionRow-template').removeClass('comment-attire');
		//$(".versionRow-template").children('comment-user-avatar').show();
		$("#version_"+event.target.id).parent().addClass('comment-attire');
		$("#version_"+event.target.id).parent().css('padding', '39px 0px');
		/*this.collection.load(this.pattern.model.attributes,function(){
			self.scrollToBottom();
		});*/
	},

	afterRender: function() {

		var self = this;
	// Wait until call stack is cleared to resize comment section
	// (otherwise, DOM will not elements from parent components yet)
		window.setTimeout(function() {
			self.resizeVersionSection();
		},5);
	},

	// post a comment
	postVersion: function(e, f) {


		console.log(this.parent.get('id'));
		console.log(this.collection.models);
		console.log(this.collection.models.attributes.id);

		var val = this.$('textarea').val();
		//var check = $('span').hasClass('span-comment').attr('id');
		console.log(this);
		exit;
		// Argument f is the raw jquery event object and we need it to prevent new line characters
		// form inserting to the textarea on pressEnter.
		f && f.preventDefault();
		console.log(f);
		var commentPayload = this.getCommentPayload();

		// prevent empty comments
		if (commentPayload.match(/^\s*$/) !== null) {
			return;
		}

		// Clear comment textarea
		this.$('textarea').val('');

		// Submit comment to server
		Mast.Socket.request(this.getUrlRoot()+'addComment',{
			id: this.get('id'),
			payload: commentPayload
		}, function(res) {});
	},

	// Fetch and clear the contents of the textarea
	getCommentPayload: function() {
		return this.$('textarea').val();
	},

	resizeVersionSection: function() {
		var sectionHeight = this.sectionHeight =
		$('.details-sidebar').innerHeight() -
		$('.top-container').innerHeight() -
		$('.activity-search-headers').innerHeight() -
		$('.currently-viewing').innerHeight()  -
		$('.comment-form').innerHeight();
		this.$('.versionRow-outlet').height(sectionHeight);
		this.$('.versionRow-outlet').css('max-height', sectionHeight + 'px');
	},

	// scroll to the new comment when it is created
	scrollAtBottom: function() {
		var commentStream = $('.versionRow-outlet');
		commentStream && commentStream[0] &&
			commentStream.scrollTop(commentStream[0].scrollHeight);
	},
	
	getUrlRoot: function () {
		return "/"+this.get('type')+"/";
	}


});